mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y")),
# большинство компаний малобюджетны, объединим все остальные кроме первых шести в "другие"
distributor = fct_lump(distributor, n = 6))
movie_profit %>% count(distributor, sort = TRUE)
movie_profit_raw <- read_csv(
"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2018/2018-10-23/movie_profit.csv")
movie_profit <- movie_profit_raw %>%
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01") %>%
# дата сохранена как текст, распарсим её для корректного отображения
mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y")),
# большинство компаний малобюджетны, объединим все остальные кроме первых шести в "другие"
distributor = fct_lump(distributor, n = 6))
movie_profit %>% count(distributor, sort = TRUE)
movie_profit %>%
ggplot(aes(production_budget)) +
geom_histogram() +
scale_x_log10(labels = dollar_format())
movie_profit <- movie_profit_raw %>%
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01") %>%
# дата сохранена как текст, распарсим её для корректного отображения
mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y"))) %>%
arrange(desc(row_number())) %>%
disctinct(movie, release_date, .keep.all = TRUE)
movie_profit <- movie_profit_raw %>%
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01") %>%
# дата сохранена как текст, распарсим её для корректного отображения
mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y"))) %>%
arrange(desc(row_number())) %>%
distinct(movie, release_date, .keep.all = TRUE)
movie_profit
movie_profit_raw <- read_csv(
"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2018/2018-10-23/movie_profit.csv")
movie_profit <- movie_profit_raw %>%
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01") %>%
# дата сохранена как текст, распарсим её для корректного отображения
mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y"))) %>%
arrange(desc(row_number())) %>%
distinct(movie, release_date, .keep.all = TRUE)
movie_profit
movie_profit %>%
count(distributor, sort = TRUE)
movie_profit %>% count(movie, sort = TRUE)
movie_profit_raw <- read_csv(
"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2018/2018-10-23/movie_profit.csv")
movie_profit <- movie_profit_raw %>%
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01") %>%
# дата сохранена как текст, распарсим её для корректного отображения
mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y"))) %>%
arrange(desc(row_number())) %>%
distinct(movie, release_date, .keep.all = TRUE)
movie_profit %>% count(movie, sort = TRUE)
movie_profit %>%
count(distributor, sort = TRUE)
movie_profit <- movie_profit_raw %>%
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01") %>%
# дата сохранена как текст, распарсим её для корректного отображения
mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y"))) %>%
arrange(desc(row_number())) %>%
distinct(movie, release_date, .keep.all = TRUE)
movie_profit %>%
count(distributor, sort = TRUE)
movie_profit <- movie_profit_raw %>%
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01") %>%
# дата сохранена как текст, распарсим её для корректного отображения
mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y"))) %>%
arrange(desc(row_number())) %>%
distinct(movie, release_date, .keep.all = TRUE) %>%
mutate(distributor = fct_lump(distributor, n = 6))
movie_profit_raw <- read_csv(
"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2018/2018-10-23/movie_profit.csv")
movie_profit <- movie_profit_raw %>%
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01")
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01") %>%
# дата сохранена как текст, распарсим её для корректного отображения
mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y")))
movie_profit <- movie_profit_raw %>%
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01") %>%
# дата сохранена как текст, распарсим её для корректного отображения
mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y")))
movie_profit_raw %>%
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01") %>%
# дата сохранена как текст, распарсим её для корректного отображения
mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y"))) %>%
arrange(desc(row_number()))
movie_profit_raw %>%
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01") %>%
# дата сохранена как текст, распарсим её для корректного отображения
mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y"))) %>%
arrange(desc(row_number())) %>%
distinct(movie, release_date, .keep.all = TRUE)
movie_profit %>%
ggplot(aes(production_budget)) +
boxplot() +
scale_x_log10(labels = dollar_format())
movie_profit %>%
ggplot(aes(distributor, production_budget)) +
boxplot() +
scale_x_log10(labels = dollar_format())
movie_profit %>%
ggplot(aes(distributor, production_budget)) +
boxplot() +
scale_x_log10(labels = dollar_format())
movie_profit %>%
ggplot(aes(distributor, production_budget)) +
geom_boxplot() +
scale_x_log10(labels = dollar_format())
movie_profit %>%
ggplot(aes(distributor, production_budget)) +
geom_boxplot() +
scale_y_log10(labels = dollar_format())
movie_profit <- movie_profit_raw %>%
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01") %>%
# дата сохранена как текст, распарсим её для корректного отображения
mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y"))) %>%
arrange(desc(row_number())) %>%
distinct(movie, release_date, .keep.all = TRUE) %>%
mutate(distributor = fct_lump(distributor, n = 6))
movie_profit <- movie_profit_raw %>%
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01") %>%
# дата сохранена как текст, распарсим её для корректного отображения
mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y"))) %>%
arrange(desc(row_number())) %>%
distinct(movie, release_date, .keep.all = TRUE) %>%
mutate(distributor = fct_lump(distributor, n = 6))
movie_profit_raw %>%
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01") %>%
# дата сохранена как текст, распарсим её для корректного отображения
mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y"))) %>%
arrange(desc(row_number()))
movie_profit <- movie_profit_raw %>%
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01") %>%
# дата сохранена как текст, распарсим её для корректного отображения
mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y"))) %>%
arrange(desc(row_number())) %>%
mutate(distributor = fct_lump(distributor, n = 6))
movie_profit %>%
count(distributor, sort = TRUE)
movie_profit %>%
ggplot(aes(production_budget)) +
geom_histogram() +
scale_x_log10(labels = dollar_format())
movie_profit %>%
ggplot(aes(distributor, production_budget)) +
geom_boxplot() +
scale_y_log10(labels = dollar_format())
movie_profit %>%
ggplot(aes(distributor, production_budget)) +
geom_boxplot() +
scale_y_log10(labels = dollar_format()) +
coord_flip()
movie_profit %>%
count(distributor, sort = TRUE)
movie_profit %>%
ggplot(aes(production_budget)) +
geom_histogram() +
scale_x_log10(labels = dollar_format())
movie_profit %>%
count(distributor, sort = TRUE)
movie_profit %>%
ggplot(aes(distributor, worldwide_gross)) +
geom_boxplot() +
scale_y_log10(labels = dollar_format()) +
coord_flip()
movie_profit %>%
ggplot(aes(distributor, worldwide_gross)) +
geom_boxplot() +
scale_y_log10(labels = dollar_format()) +
coord_flip()
movie_profit %>%
count(genres, sort = TRUE)
View(movie_profit)
movie_profit %>%
count(genre, sort = TRUE)
movie_profit %>%
ggplot(aes(genre, production_budget)) +
geom_boxplot() +
scale_y_log10(labels = dollar_format()) +
coord_flip()
movie_profit %>%
mutate(genre = fct_reorder(genre, production_budget))
ggplot(aes(genre, production_budget)) +
geom_boxplot() +
scale_y_log10(labels = dollar_format()) +
coord_flip()
movie_profit %>%
mutate(genre = fct_reorder(genre, production_budget)) %>%
ggplot(aes(genre, production_budget)) +
geom_boxplot() +
scale_y_log10(labels = dollar_format()) +
coord_flip()
movie_profit %>%
mutate(decade = 10 * floor(year(release_date)) / 10) %>%
count(decade)
movie_profit %>%
mutate(decade = 10 * floor(year(release_date) / 10)) %>%
count(decade)
movie_profit <- movie_profit_raw %>%
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# дата сохранена как текст, распарсим её для корректного отображения
mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y"))) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01") %>%
arrange(desc(row_number())) %>%
# предположим, что самые большие бюджеты на производство сконцентрированы в руках нескольких компаний, допустим 6
mutate(distributor = fct_lump(distributor, n = 6))
movie_profit %>%
mutate(decade = 10 * floor(year(release_date) / 10)) %>%
count(decade)
movie_profit %>%
mutate(decade = 10 * floor(year(release_date) / 10)) %>%
group_by(decade)
movie_profit %>%
mutate(decade = 10 * floor(year(release_date) / 10)) %>%
group_by(decade) %>%
summarize_at(vars(production_budget:worldwide_gross), median, na.rm = TRUE)
movie_profit
movie_profit %>%
mutate(decade = 10 * floor(year(release_date) / 10)) %>%
group_by(decade) %>%
summarize_at(vars(production_budget:worldwide_gross), median, na.rm = TRUE) %>%
gather(metric, value, -decade)
movie_profit %>%
mutate(decade = 10 * floor(year(release_date) / 10)) %>%
group_by(decade) %>%
summarize_at(vars(production_budget:worldwide_gross), median, na.rm = TRUE) %>%
gather(metric, value, -decade) %>%
ggplot(aes(decade, value, color = metric)) +
geom_line()
movie_profit %>%
ggplot(aes(distributor, worldwide_gross)) +
geom_boxplot() +
scale_y_log10(labels = dollar_format()) +
coord_flip()
movie_profit <- movie_profit_raw %>%
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# дата сохранена как текст, распарсим её для корректного отображения
mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y"))) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01") %>%
arrange(desc(row_number())) %>%
distinct(movie, release_date, .keep_all = TRUE)
# предположим, что самые большие бюджеты на производство сконцентрированы в руках нескольких компаний, допустим 6
mutate(distributor = fct_lump(distributor, n = 6))
movie_profit <- movie_profit_raw %>%
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# дата сохранена как текст, распарсим её для корректного отображения
mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y"))) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01") %>%
arrange(desc(row_number())) %>%
distinct(movie, release_date, .keep_all = TRUE) %>%
# предположим, что самые большие бюджеты на производство сконцентрированы в руках нескольких компаний, допустим 6
mutate(distributor = fct_lump(distributor, n = 6))
# для начала посмотрим сколько фильмов производят компании.
movie_profit %>%
count(distributor, sort = TRUE)
# шесть компаний производят столько же фильмов, сколько все оставшиеся компании
movie_profit %>%
ggplot(aes(production_budget)) +
geom_histogram() +
scale_x_log10(labels = dollar_format())
movie_profit %>%
ggplot(aes(distributor, production_budget)) +
geom_boxplot() +
scale_y_log10(labels = dollar_format()) +
coord_flip()
movie_profit %>%
ggplot(aes(distributor, worldwide_gross)) +
geom_boxplot() +
scale_y_log10(labels = dollar_format()) +
coord_flip()
movie_profit %>%
count(genre, sort = TRUE)
movie_profit %>%
ggplot(aes(genre, production_budget)) +
geom_boxplot() +
scale_y_log10(labels = dollar_format()) +
coord_flip()
movie_profit %>%
mutate(genre = fct_reorder(genre, production_budget)) %>%
ggplot(aes(genre, production_budget)) +
geom_boxplot() +
scale_y_log10(labels = dollar_format()) +
coord_flip()
movie_profit %>%
mutate(decade = 10 * floor(year(release_date) / 10)) %>%
group_by(decade) %>%
summarize_at(vars(production_budget:worldwide_gross), median, na.rm = TRUE) %>%
gather(metric, value, -decade) %>%
ggplot(aes(decade, value, color = metric)) +
geom_line()
View(movie_profit)
movie_profit %>%
mutate(genre = fct_reorder(genre, production_budget)) %>%
ggplot(aes(genre, production_budget)) +
geom_boxplot() +
scale_y_log10(labels = dollar_format()) +
coord_flip()
movie_profit %>%
ggplot(aes(distributor, production_budget)) +
geom_boxplot() +
scale_y_log10(labels = dollar_format()) +
coord_flip()
movie_profit %>%
ggplot(aes(production_budget)) +
geom_histogram() +
scale_x_log10(labels = dollar_format())
View(movie_profit_raw)
movie_profit_raw <- read_csv(
"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2018/2018-10-23/movie_profit.csv")
movie_profit <- movie_profit_raw %>%
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# дата сохранена как текст, распарсим её для корректного отображения
mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y"))) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01") %>%
arrange(desc(row_number())) %>%
distinct(movie, release_date, .keep_all = TRUE) %>%
# предположим, что самые большие бюджеты на производство сконцентрированы в руках нескольких компаний, допустим 6
mutate(distributor = fct_lump(distributor, n = 6))
movie_profit %>%
ggplot(aes(production_budget)) +
geom_histogram() +
scale_x_log10(labels = dollar_format())
movie_profit %>%
ggplot(aes(distributor, production_budget)) +
geom_boxplot() +
scale_y_log10(labels = dollar_format()) +
coord_flip()
movie_profit %>%
mutate(decade = 10 * floor(year(release_date) / 10)) %>%
group_by(decade) %>%
summarize_at(vars(production_budget:worldwide_gross), median, na.rm = TRUE) %>%
gather(metric, value, -decade) %>%
ggplot(aes(decade, value, color = metric)) +
geom_line()
movie_profit %>%
mutate(decade = 10 * floor(year(release_date) / 10)) %>%
group_by(decade) %>%
summarize_at(vars(production_budget:worldwide_gross), median, na.rm = TRUE) %>%
gather(metric, value, -decade) %>%
ggplot(aes(decade, value, color = metric)) +
geom_line() +
scale_y_log10(labels = dollar_format())
movie_profit
movie_profit %>% arrange(desc(worldwide_gross)) %>% View()
movie_profit %>% arrange(desc(production_budget)) %>% View()
movie_profit %>%
mutate(decade = 10 * floor(year(release_date) / 10)) %>%
group_by(decade) %>%
summarize_at(vars(production_budget:worldwide_gross), median, na.rm = TRUE) %>%
gather(metric, value, -decade) %>%
ggplot(aes(decade, value, color = metric)) +
geom_line() +
scale_y_log10(labels = dollar_format())
movie_profit %>%
mutate(decade = 10 * floor(year(release_date) / 10))
movie_profit %>%
mutate(decade = 10 * floor(year(release_date) / 10)) %>%
group_by(decade) %>%
summarize_at(vars(production_budget:worldwide_gross), median, na.rm = TRUE) %>%
gather(metric, value, -decade)
movie_profit %>%
mutate(decade = 10 * floor(year(release_date) / 10)) %>%
group_by(decade) %>%
summarize_at(vars(production_budget:worldwide_gross), median, na.rm = TRUE) %>%
gather(metric, value, -decade) %>%
ggplot(aes(decade, value, color = metric)) +
geom_line() +
scale_y_log10(labels = dollar_format())
movie_profit %>%
mutate(decade = 10 * floor(year(release_date) / 10)) %>%
group_by(decade) %>%
summarize_at(vars(production_budget:worldwide_gross), median, na.rm = TRUE) %>%
gather(metric, value, -decade) %>%
ggplot(aes(decade, value, color = metric)) +
geom_line() +
labels = dollar_format()
movie_profit %>%
mutate(decade = 10 * floor(year(release_date) / 10)) %>%
group_by(decade) %>%
summarize_at(vars(production_budget:worldwide_gross), median, na.rm = TRUE) %>%
gather(metric, value, -decade) %>%
ggplot(aes(decade, value, color = metric)) +
geom_line()
movie_profit %>%
mutate(decade = 10 * floor(year(release_date) / 10)) %>%
group_by(decade) %>%
summarize_at(vars(production_budget:worldwide_gross), median, na.rm = TRUE) %>%
gather(metric, value, -decade) %>%
ggplot(aes(decade, value, color = metric)) +
geom_line() +
scale_y_log10(labels = dollar_format())
movie_profit_raw <- read_csv(
"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2018/2018-10-23/movie_profit.csv")
movie_profit <- movie_profit_raw %>%
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# дата сохранена как текст, распарсим её для корректного отображения
mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y"))) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01") %>%
arrange(desc(row_number())) %>%
distinct(movie, release_date, .keep_all = TRUE) %>%
# предположим, что самые большие бюджеты на производство сконцентрированы в руках нескольких компаний, допустим 6
mutate(distributor = fct_lump(distributor, n = 6))
movie_profit %>% arrange(desc(produ)) %>% View()
movie_profit %>% arrange(desc(production_budget)) %>% View()
movie_profit %>%
mutate(genre = fct_reorder(genre, production_budget)) %>%
filter(is.na(distributor)) %>%
ggplot(aes(genre, production_budget)) +
geom_boxplot() +
scale_y_log10(labels = dollar_format()) +
coord_flip() +
facet_wrap(~ distributor)
movie_profit %>%
mutate(genre = fct_reorder(genre, production_budget)) %>%
filter(!is.na(distributor)) %>%
ggplot(aes(genre, production_budget)) +
geom_boxplot() +
scale_y_log10(labels = dollar_format()) +
coord_flip() +
facet_wrap(~ distributor)
movie_profit %>%
mutate(genre = fct_reorder(genre, worldwide_gross)) %>%
filter(!is.na(distributor)) %>%
ggplot(aes(genre, worldwide_gross)) +
geom_boxplot() +
scale_y_log10(labels = dollar_format()) +
coord_flip() +
facet_wrap(~ distributor)
movie_profit %>%
mutate(genre = fct_reorder(genre, worldwide_gross)) %>%
filter(!is.na(distributor)) %>%
ggplot(aes(genre, worldwide_gross)) +
geom_boxplot() +
scale_y_log10(labels = dollar_format()) +
coord_flip() +
facet_wrap(~ distributor)
movie_profit %>%
mutate(profit_ratio = worldwide_gross / production_budget)
movie_profit %>%
mutate(profit_ratio = worldwide_gross / production_budget) %>%
arrange(desc(profit_ratio))
movie_profit <- movie_profit_raw %>%
# избавимся от первого столбца потому что это не информативный столбец
select(-X1) %>%
# дата сохранена как текст, распарсим её для корректного отображения
mutate(release_date = as.Date(parse_date_time(release_date, "%m!/%d/%Y"))) %>%
# будем изучать только фильмы, вышедшие до начала 2018 года
filter(release_date < "2018-01-01") %>%
arrange(desc(row_number())) %>%
distinct(movie, release_date, .keep_all = TRUE) %>%
# предположим, что самые большие бюджеты на производство сконцентрированы в руках нескольких компаний, допустим 6
mutate(distributor = fct_lump(distributor, n = 6)) %>%
filter(worldwide_gross > 0)
movie_profit %>%
mutate(profit_ratio = worldwide_gross / production_budget) %>%
arrange(profit_ratio)
